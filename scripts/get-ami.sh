#!/usr/bin/env bash
#
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
ROOT_DIR=$(dirname $DIR)
BUILD=${BUILD:-$ROOT_DIR/build}                          # hvm/paravirtual - note: t1.micro supports only paravirtual type
AMIS_JSON="${BUILD}/tf-amis.json"

# Default Environment variables
AWS_PROFILE="${AWS_PROFILE:-mycluster}"             # aws profile
AMI_NAME_PREFIX="${AMI_NAME_PREFIX:-RHEL-7.1}"      # ami name prefix
VM_TYPE=${VM_TYPE:-hvm}   

# Get options from the command line
while getopts ":p:i:t:" OPTION
do
    case $OPTION in
        p)
          AWS_PROFILE=$OPTARG
          ;;
        p)
          AMI_NAME_PREFIX=$OPTARG
          ;;
        t)
          VM_TYPE=$OPTARG
          ;;
        *)
          echo "Usage: $(basename $0) -p <ami-name-prefix> -i <ami-name-prefix> -t <hvm|paravirtual>"
          echo "Example: $(basename $0) -p mycluster -i RHEL-7.1 -t hvm"
          exit 0
          ;;
    esac
done

if [ ! -f ${AMIS_JSON} ] || [ ! -s ${AMIS_JSON} ]; then
    # get all amis descriptions
    aws --profile $AWS_PROFILE ec2 describe-images > ${AMIS_JSON}
fi

# Set the jq filter for the lastest avaiable ami that matches the given prefix and vm-type
read -r -d '' JQ_FILTER <<EOF
.Images
 | map(select(.Name != null and .VirtualizationType == "${VM_TYPE}" and .State == "available")
 | select(.Name | startswith("${AMI_NAME_PREFIX}")))
 | .[length -1].ImageId
EOF

# Get the AMI id
ami=$( jq --raw-output "$JQ_FILTER" ${AMIS_JSON} )

cat <<EOF
# Generated by scripts/get-ami.sh
variable "ami" {
  default = "$ami"
}
EOF